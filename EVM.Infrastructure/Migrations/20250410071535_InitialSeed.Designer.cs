// <auto-generated />
using System;
using EVM.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EVM.Infrastructure.Migrations
{
    [DbContext(typeof(EventVenueManagerContext))]
    [Migration("20250410071535_InitialSeed")]
    partial class InitialSeed
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EVM.Domain.Entities.Admin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("Admin");

                    b.HasKey("Id");

                    b.ToTable("Admins");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "admin@evm.net",
                            Name = "guildmaster",
                            Password = "1234",
                            Role = "Admin"
                        });
                });

            modelBuilder.Entity("EVM.Domain.Entities.Catering", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("PricePerPerson")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("Id");

                    b.ToTable("Caterings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Standard Package",
                            PricePerPerson = 25.00m
                        },
                        new
                        {
                            Id = 2,
                            Name = "Deluxe Menu",
                            PricePerPerson = 40.00m
                        },
                        new
                        {
                            Id = 3,
                            Name = "Coffee Break",
                            PricePerPerson = 10.00m
                        });
                });

            modelBuilder.Entity("EVM.Domain.Entities.CateringOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CateringId")
                        .HasColumnType("int");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("NumberOfPeople")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CateringId");

                    b.HasIndex("EventId", "CateringId")
                        .IsUnique();

                    b.ToTable("CateringOptions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CateringId = 2,
                            EventId = new Guid("a1b2c3d4-e5f6-7890-1234-567890abcdef"),
                            NumberOfPeople = 150,
                            TotalPrice = 0m
                        },
                        new
                        {
                            Id = 2,
                            CateringId = 3,
                            EventId = new Guid("fedcba98-7654-3210-fedc-ba9876543210"),
                            NumberOfPeople = 40,
                            TotalPrice = 0m
                        });
                });

            modelBuilder.Entity("EVM.Domain.Entities.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("Client");

                    b.HasKey("Id");

                    b.ToTable("Clients");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "info@eventpro.com",
                            Name = "EventPro Corp",
                            Password = "epropass",
                            PhoneNumber = "123-456-7890",
                            Role = "Client"
                        },
                        new
                        {
                            Id = 2,
                            Email = "contact@globalgatherings.net",
                            Name = "Global Gatherings",
                            Password = "ggpass",
                            PhoneNumber = "987-654-3210",
                            Role = "Client"
                        },
                        new
                        {
                            Id = 3,
                            Email = "alice.planner@events.net",
                            Name = "Event Planner Alice",
                            Password = "eventpass",
                            PhoneNumber = "555-123-4567",
                            Role = "Client"
                        });
                });

            modelBuilder.Entity("EVM.Domain.Entities.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("Customer");

                    b.HasKey("Id");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "alice.smith@example.com",
                            Name = "Alice Smith",
                            Role = "Customer"
                        },
                        new
                        {
                            Id = 2,
                            Email = "bob.johnson@example.com",
                            Name = "Bob Johnson",
                            Role = "Customer"
                        });
                });

            modelBuilder.Entity("EVM.Domain.Entities.Event", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("Events");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a1b2c3d4-e5f6-7890-1234-567890abcdef"),
                            ClientId = 1,
                            Description = "The premier tech event of the year.",
                            EndDate = new DateTime(2025, 5, 17, 17, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Annual Tech Conference",
                            StartDate = new DateTime(2025, 5, 15, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "Conference"
                        },
                        new
                        {
                            Id = new Guid("fedcba98-7654-3210-fedc-ba9876543210"),
                            ClientId = 2,
                            Description = "Hands-on workshop for marketing professionals.",
                            EndDate = new DateTime(2025, 6, 10, 16, 30, 0, 0, DateTimeKind.Unspecified),
                            Name = "Marketing Workshop",
                            StartDate = new DateTime(2025, 6, 10, 9, 30, 0, 0, DateTimeKind.Unspecified),
                            Type = "Corporate"
                        });
                });

            modelBuilder.Entity("EVM.Domain.Entities.EventLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("DetailsJson")
                        .HasColumnType("TEXT");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("Timestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("EventLogs");
                });

            modelBuilder.Entity("EVM.Domain.Entities.Material", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("PricePerUnit")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("Id");

                    b.ToTable("Materials");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Projector",
                            PricePerUnit = 30.00m
                        },
                        new
                        {
                            Id = 2,
                            Name = "Sound System",
                            PricePerUnit = 50.00m
                        },
                        new
                        {
                            Id = 3,
                            Name = "Flip Chart",
                            PricePerUnit = 10.00m
                        });
                });

            modelBuilder.Entity("EVM.Domain.Entities.MaterialOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid>("EventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("MaterialId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("MaterialId");

                    b.HasIndex("EventId", "MaterialId")
                        .IsUnique();

                    b.ToTable("MaterialOptions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            EventId = new Guid("a1b2c3d4-e5f6-7890-1234-567890abcdef"),
                            MaterialId = 1,
                            Quantity = 2,
                            TotalPrice = 0m
                        },
                        new
                        {
                            Id = 2,
                            EventId = new Guid("fedcba98-7654-3210-fedc-ba9876543210"),
                            MaterialId = 3,
                            Quantity = 1,
                            TotalPrice = 0m
                        });
                });

            modelBuilder.Entity("EVM.Domain.Entities.Room", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("PricePerHour")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("Id");

                    b.ToTable("Rooms");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Capacity = 200,
                            Description = "Our largest and most elegant space, perfect for weddings, galas, and large conferences. Features high ceilings, a stage, and ample dance floor.",
                            IsAvailable = true,
                            Name = "Grand Ballroom",
                            PricePerHour = 150.00m
                        },
                        new
                        {
                            Id = 2,
                            Capacity = 50,
                            Description = "A well-equipped conference room ideal for meetings, workshops, and presentations. Includes built-in AV equipment and comfortable seating.",
                            IsAvailable = true,
                            Name = "Conference Room A",
                            PricePerHour = 75.00m
                        },
                        new
                        {
                            Id = 3,
                            Capacity = 20,
                            Description = "A smaller, more intimate meeting room suitable for team discussions, interviews, and small group sessions. Offers a quiet and focused environment.",
                            IsAvailable = true,
                            Name = "Meeting Room 1",
                            PricePerHour = 40.00m
                        },
                        new
                        {
                            Id = 4,
                            Capacity = 30,
                            Description = "A premium suite offering a sophisticated setting for high-level meetings and VIP events. Includes a private lounge area and dedicated amenities.",
                            IsAvailable = false,
                            Name = "Executive Suite",
                            PricePerHour = 120.00m
                        },
                        new
                        {
                            Id = 5,
                            Capacity = 60,
                            Description = "A flexible training room that can be configured in various layouts. Equipped with whiteboards and projector screens, perfect for workshops and training sessions.",
                            IsAvailable = true,
                            Name = "Training Room B",
                            PricePerHour = 85.00m
                        });
                });

            modelBuilder.Entity("EVM.Domain.Entities.RoomReservation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PaymentStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoomId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoomId");

                    b.HasIndex("EventId", "RoomId")
                        .IsUnique();

                    b.ToTable("RoomReservations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("01234567-89ab-cdef-0123-456789abcdef"),
                            EventId = new Guid("a1b2c3d4-e5f6-7890-1234-567890abcdef"),
                            PaymentStatus = "Pending",
                            RoomId = 1
                        },
                        new
                        {
                            Id = new Guid("98765432-10fe-dcba-9876-543210fedcba"),
                            EventId = new Guid("fedcba98-7654-3210-fedc-ba9876543210"),
                            PaymentStatus = "Pending",
                            RoomId = 2
                        });
                });

            modelBuilder.Entity("EVM.Domain.Entities.Ticket", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsUsed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime>("PurchaseDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<int>("QuantityAvailable")
                        .HasColumnType("int");

                    b.Property<int>("QuantitySold")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("EventId", "CustomerId")
                        .IsUnique();

                    b.ToTable("Tickets");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ea81fc53-c9be-43ce-9446-989068a647a7"),
                            CustomerId = 1,
                            EventId = new Guid("a1b2c3d4-e5f6-7890-1234-567890abcdef"),
                            IsUsed = false,
                            Price = 100.00m,
                            PurchaseDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            QuantityAvailable = 0,
                            QuantitySold = 2,
                            Type = "Regular"
                        },
                        new
                        {
                            Id = new Guid("689f906c-446a-4b85-a266-dc2591c15482"),
                            CustomerId = 2,
                            EventId = new Guid("fedcba98-7654-3210-fedc-ba9876543210"),
                            IsUsed = false,
                            Price = 50.00m,
                            PurchaseDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            QuantityAvailable = 0,
                            QuantitySold = 1,
                            Type = "VIP"
                        });
                });

            modelBuilder.Entity("EVM.Domain.Entities.CateringOption", b =>
                {
                    b.HasOne("EVM.Domain.Entities.Catering", "Catering")
                        .WithMany("Options")
                        .HasForeignKey("CateringId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EVM.Domain.Entities.Event", "Event")
                        .WithMany("CateringOptions")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Catering");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("EVM.Domain.Entities.Event", b =>
                {
                    b.HasOne("EVM.Domain.Entities.Client", "Client")
                        .WithMany("Events")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("EVM.Domain.Entities.EventLog", b =>
                {
                    b.HasOne("EVM.Domain.Entities.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("EVM.Domain.Entities.MaterialOption", b =>
                {
                    b.HasOne("EVM.Domain.Entities.Event", "Event")
                        .WithMany("MaterialOptions")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EVM.Domain.Entities.Material", "Material")
                        .WithMany("Options")
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("Material");
                });

            modelBuilder.Entity("EVM.Domain.Entities.RoomReservation", b =>
                {
                    b.HasOne("EVM.Domain.Entities.Event", "Event")
                        .WithMany("RoomReservations")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EVM.Domain.Entities.Room", "Room")
                        .WithMany("Reservations")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("EVM.Domain.Entities.Ticket", b =>
                {
                    b.HasOne("EVM.Domain.Entities.Customer", "Customer")
                        .WithMany("Tickets")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EVM.Domain.Entities.Event", "Event")
                        .WithMany("Tickets")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("EVM.Domain.Entities.Catering", b =>
                {
                    b.Navigation("Options");
                });

            modelBuilder.Entity("EVM.Domain.Entities.Client", b =>
                {
                    b.Navigation("Events");
                });

            modelBuilder.Entity("EVM.Domain.Entities.Customer", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("EVM.Domain.Entities.Event", b =>
                {
                    b.Navigation("CateringOptions");

                    b.Navigation("MaterialOptions");

                    b.Navigation("RoomReservations");

                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("EVM.Domain.Entities.Material", b =>
                {
                    b.Navigation("Options");
                });

            modelBuilder.Entity("EVM.Domain.Entities.Room", b =>
                {
                    b.Navigation("Reservations");
                });
#pragma warning restore 612, 618
        }
    }
}
